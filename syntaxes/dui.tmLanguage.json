{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "dui",
	"patterns": [
		{
			"include": "#xml"
		},
		{
			"include": "#lua"
		}
	],
	"repository": {
		"xml":{
			"patterns": [
				{
					"begin":"(<\\?)\\s*([-_a-zA-Z0-9]+)",
					"captures":{
						"1":{
							"name":"punctuation.definition.tag.begin.xml"
						},
						"2":{
							"name":"entity.name.tag.xml"
						}
					},
					"end":"(\\?>)",
					"name":"meta.tag.preprocessor.xml",
					"patterns":[
						{
							"match":"([a-zA-Z-]+)",
							"name":"entity.other.attribute-name.xml"
						},
						{
							"include":"#doublequotedString"
						},
						{
							"include":"#singlequotedString"
						}
					]
				},
				{
					"begin":"(<!)(DOCTYPE)\\s+([:a-zA-Z_][:a-zA-Z0-9_.-]*)",
					"captures":{
						"1":{
							"name":"punctuation.definition.tag.begin.xml"
						},
						"2":{
							"name":"keyword.doctype.xml"
						},
						"3":{
							"name":"variable.documentroot.xml"
						}
					},
					"end":"\\s*(>)",
					"name":"meta.tag.sgml.doctype.xml",
					"patterns":[
						{
							"include":"#internalSubset"
						}
					]
				},
				{
					"begin":"<[!%]--",
					"captures":{
						"0":{
							"name":"punctuation.definition.comment.xml"
						}
					},
					"end":"--%?>",
					"name":"comment.block.xml"
				},
				{
					"begin":"<\\?",
					"captures":{
						"0":{
							"name":"punctuation.definition.processing-instruction.xml"
						}
					},
					"end":"\\?>",
					"name":"comment.processing-instruction.xml"
				},
				{
					"begin":"(<)((?:([-_a-zA-Z0-9]+)((:)))?([-_a-zA-Z0-9:]+))(?=(\\s[^>]*)?></\\2>)",
					"beginCaptures":{
						"1":{
							"name":"punctuation.definition.tag.begin.xml"
						},
						"3":{
							"name":"entity.name.tag.namespace.xml"
						},
						"4":{
							"name":"entity.name.tag.xml"
						},
						"5":{
							"name":"punctuation.separator.namespace.xml"
						},
						"6":{
							"name":"entity.name.tag.localname.xml"
						}
					},
					"end":"(>)(<)(/)(?:([-_a-zA-Z0-9]+)((:)))?([-_a-zA-Z0-9:]+)(>)",
					"endCaptures":{
						"1":{
							"name":"punctuation.definition.tag.end.xml"
						},
						"2":{
							"name":"meta.scope.between-tag-pair.xml"
						},
						"3":{
							"name":"punctuation.definition.tag.begin.xml"
						},
						"4":{
							"name":"entity.name.tag.namespace.xml"
						},
						"5":{
							"name":"entity.name.tag.xml"
						},
						"6":{
							"name":"punctuation.separator.namespace.xml"
						},
						"7":{
							"name":"entity.name.tag.localname.xml"
						},
						"8":{
							"name":"punctuation.definition.tag.end.xml"
						}
					},
					"name":"meta.tag.no-content.xml",
					"patterns":[
						{
							"include":"#tagStuff"
						}
					]
				},
				{
					"begin":"(</?)(?:([-_a-zA-Z0-9]+)((:)))?([-_a-zA-Z0-9:]+)",
					"captures":{
						"1":{
							"name":"punctuation.definition.tag.begin.xml"
						},
						"2":{
							"name":"entity.name.tag.namespace.xml"
						},
						"3":{
							"name":"entity.name.tag.xml"
						},
						"4":{
							"name":"punctuation.separator.namespace.xml"
						},
						"5":{
							"name":"entity.name.tag.localname.xml"
						}
					},
					"end":"(/?>)",
					"endCaptures":{
						"1":{
							"name":"punctuation.definition.tag.end.xml"
						}
					},
					"name":"meta.tag.xml",
					"patterns":[
						{
							"include":"#tagStuff"
						}
					]
				},
				{
					"include":"#entity"
				},
				{
					"include":"#bare-ampersand"
				},
				{
					"begin":"<!\\[CDATA\\[",
					"beginCaptures":{
						"0":{
							"name":"punctuation.definition.string.begin.xml"
						}
					},
					"end":"]]>",
					"endCaptures":{
						"0":{
							"name":"punctuation.definition.string.end.xml"
						}
					},
					"name":"string.unquoted.cdata.xml",
					"patterns":[
						{
							"include":"#lua"
						}
					]
				}
			]
		},
		"bare-ampersand":{
			"patterns": [
				{
					"match":"&",
					"name":"invalid.illegal.bad-ampersand.xml"
				}
			]
		},
		"block_comment":{
			"begin":"\\(:",
			"end":":\\)",
			"patterns":[
				{
					"include":"#block_comment"
				}
			]
		},
		"code_block":{
			"begin":"\\{",
			"end":"\\}",
			"name":"meta.code-block.xquery",
			"patterns":[
				{
					"include":"$self"
				}
			]
		},
		"doublequotedString":{
			"begin":"(?<![-_a-zA-Z0-9:'\"]>)\\s*\"(?![\\w\\s()']*</[-_a-zA-Z0-9:])",
			"beginCaptures":{
				"0":{
					"name":"punctuation.definition.string.begin.xquery"
				}
			},
			"end":"\"",
			"endCaptures":{
				"0":{
					"name":"punctuation.definition.string.end.xquery"
				}
			},
			"name":"string.quoted.double.xquery",
			"patterns":[
				{
					"include":"#entity"
				},
				{
					"include":"#bare-ampersand"
				}
			]
		},
		"doublequotedStringXml":{
			"begin":"\"",
			"beginCaptures":{
				"0":{
					"name":"punctuation.definition.string.begin.xml"
				}
			},
			"end":"\"",
			"endCaptures":{
				"0":{
					"name":"punctuation.definition.string.end.xml"
				}
			},
			"name":"string.quoted.double.xml",
			"patterns":[
				{
					"include":"#entity"
				},
				{
					"include":"#bare-ampersand"
				},
				{
					"include":"#code_block"
				}
			]
		},
		"entity":{
			"patterns": [
				{
					"captures":{
						"1":{
							"name":"punctuation.definition.constant.xml"
						}
					},
					"match":"(&)([:a-zA-Z_][:a-zA-Z0-9_.-]*|#[0-9]+|#x[0-9a-fA-F]+)(;)",
					"name":"constant.character.entity.xml"
				}
			]
		},
		"internalSubset":{
			"begin":"(\\[)",
			"captures":{
				"1":{
					"name":"punctuation.definition.constant.xml"
				}
			},
			"end":"(\\])",
			"name":"meta.internalsubset.xml",
			"patterns":[
				{
					"include":"#EntityDecl"
				},
				{
					"include":"#parameterEntity"
				}
			]
		},
		"parameterEntity":{
			"patterns": [
				{
					"captures":{
						"1":{
							"name":"punctuation.definition.constant.xml"
						},
						"3":{
							"name":"punctuation.definition.constant.xml"
						}
					},
					"match":"(%)([:a-zA-Z_][:a-zA-Z0-9_.-]*)(;)",
					"name":"constant.character.parameter-entity.xml"
				}
			]
		},
		"singlequotedString":{
			"begin":"(?<![-_a-zA-Z0-9:'\"]>)\\s*'(?![\\w\\s()\"]*</[-_a-zA-Z0-9:])",
			"beginCaptures":{
				"0":{
					"name":"punctuation.definition.string.begin.xquery"
				}
			},
			"end":"'",
			"endCaptures":{
				"0":{
					"name":"punctuation.definition.string.end.xquery"
				}
			},
			"name":"string.quoted.single.xquery",
			"patterns":[
				{
					"include":"#entity"
				},
				{
					"include":"#bare-ampersand"
				}
			]
		},
		"singlequotedStringXml":{
			"begin":"'",
			"beginCaptures":{
				"0":{
					"name":"punctuation.definition.string.begin.xml"
				}
			},
			"end":"'",
			"endCaptures":{
				"0":{
					"name":"punctuation.definition.string.end.xml"
				}
			},
			"name":"string.quoted.single.xml",
			"patterns":[
				{
					"include":"#entity"
				},
				{
					"include":"#bare-ampersand"
				},
				{
					"include":"#code_block"
				}
			]
		},
		"string":{
			"patterns":[
				{
					"include":"#singlequotedString"
				},
				{
					"include":"#doublequotedString"
				}
			]
		},
		"tagStuff":{
			"patterns":[
				{
					"captures":{
						"1":{
							"name":"entity.other.attribute-name.namespace.xml"
						},
						"2":{
							"name":"entity.other.attribute-name.xml"
						},
						"3":{
							"name":"punctuation.separator.namespace.xml"
						},
						"4":{
							"name":"entity.other.attribute-name.localname.xml"
						}
					},
					"match":"(?:([-_a-zA-Z0-9]+)((:)))?([-_a-zA-Z0-9]+)="
				},
				{
					"include":"#doublequotedStringXml"
				},
				{
					"include":"#singlequotedStringXml"
				}
			]
		},
		"lua": {
			"patterns": [
				{
					"name": "meta.function.lua",
					"match": "\\b(function)(?:\\s+([a-zA-Z_.:]+[.:])?([a-zA-Z_]\\w*)\\s*)?(\\()([^)]*)(\\))",
					"captures": {
						"1":{
							"name":"keyword.control.lua"
						},
						"2":{
							"name":"entity.name.function.scope.lua"
						},
						"3":{
							"name":"entity.name.function.lua"
						},
						"4":{
							"name":"punctuation.definition.parameters.begin.lua"
						},
						"5":{
							"name":"variable.parameter.function.lua"
						},
						"6":{
							"name":"punctuation.definition.parameters.end.lua"
						}
					}
				},
				{
					"name": "meta.function.lua",
					"match": "(?<![\\d.])\\s0x[a-fA-F\\d]+|\\b\\d+(\\.\\d+)?([eE]-?\\d+)?|\\.\\d+([eE]-?\\d+)?"
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0":{
							"name":"punctuation.definition.string.begin.lua"
						}
					},
					"end": "'",
					"endCaptures":{
						"0":{
							"name":"punctuation.definition.string.end.lua"
						}
					},
					"name":"string.quoted.single.lua",
					"patterns":[{
						"match":"\\.",
						"name":"constant.character.escape.lua"
					}
					]
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0":{
							"name":"punctuation.definition.string.begin.lua"
						}
					},
					"end": "\"",
					"endCaptures":{
						"0":{
							"name":"punctuation.definition.string.end.lua"
						}
					},
					"name":"string.quoted.double.lua",
					"patterns":[{
						"match":"\\.",
						"name":"constant.character.escape.lua"
					}
					]
				},
				{
					"begin": "(?<=\\.cdef)\\s*(\\[(=*)\\[)",
					"beginCaptures": {
						"0":{
							"name":"string.quoted.other.multiline.lua"
						},
						"1":{
							"name":"punctuation.definition.string.begin.lua"
						}
					},
					"contentName":"meta.embedded.lua",
					"end": "(\\]\\2\\])",
					"endCaptures":{
						"0":{
							"name":"string.quoted.other.multiline.lua"
						},
						"1":{
							"name":"punctuation.definition.string.end.lua"
						}
					},
					"name":"string.quoted.double.lua",
					"patterns":[{
						"include": "source.c"
					}
					]
				},
				{
					"begin": "(?<!--)\\[(=*)\\[",
					"beginCaptures": {
						"0":{
							"name":"punctuation.definition.string.begin.lua"
						}
					},
					"end": "(\\]\\1\\])",
					"endCaptures":{
						"0":{
							"name":"punctuation.definition.string.end.lua"
						}
					},
					"name":"string.quoted.other.multiline.lua"
				},
				{
					"begin": "--\\[(=*)\\[",
					"beginCaptures": {
						"0":{
							"name":"punctuation.definition.comment.lua"
						}
					},
					"end": "(\\]\\1\\])",
					"name":"comment.block.lua"
				},
				{
					"begin": "(^[ \\t]+)?(?=--(?!\\[\\[))",
					"beginCaptures": {
						"1":{
							"name":"punctuation.whitespace.comment.leading.lua"
						}
					},
					"end": "(?!\\G)",
					"patterns":[{
						"begin": "--",
						"beginCaptures":{
							"0":{
								"name":"punctuation.definition.comment.lua"
							}
						},
						"end": "\n",
						"name":"comment.line.double-dash.lua"
					}],
					"name":"comment.block.lua"
				},
				{
					"match":"\\b(break|do|else|for|if|elseif|goto|return|then|repeat|while|until|end|function|local|in)\\b",
					"name":"keyword.control.lua"
				},
				{
					"match":"(?<![^.]\\.|:)\\b(false|nil|true|_G|_VERSION|math\\.(pi|huge))\\b|(?<![.])\\.{3}(?!\\.)",
					"name":"constant.language.lua"
				},
				{
					"match":"(?<![^.]\\.|:)\\b(self)\\b",
					"name":"variable.language.self.lua"
				},
				{
					"match":"(?<![^.]\\.|:)\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\b(?=\\s*(?:[({\"']|\\[\\[))",
					"name":"support.function.lua"
				},
				{
					"match":"(?<![^.]\\.|:)\\b(coroutine\\.(create|resume|running|status|wrap|yield)|string\\.(byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper)|table\\.(concat|insert|maxn|remove|sort)|math\\.(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?)|io\\.(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|os\\.(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\\.(cpath|loaded|loadlib|path|preload|seeall)|debug\\.(debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|traceback))\\b(?=\\s*(?:[({\"']|\\[\\[))",
					"name":"support.function.library.lua"
				},
				{
					"match":"\\b(and|or|not)\\b",
					"name":"keyword.operator.lua"
				},
				{
					"match":"\\b([A-Za-z_]\\w*)\\b(?=\\s*(?:[({\"']|\\[\\[))",
					"name":"support.function.any-method.lua"
				},
				{
					"match":"(?<=[^.]\\.|:)\\b([A-Za-z_]\\w*)",
					"name":"variable.other.lua"
				},
				{
					"match":"\\+|-|%|#|\\*|\\/|\\^|==?|~=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)",
					"name":"keyword.operator.lua"
				}
			]
		}
	},
	"scopeName": "source.dui",
	"fileTypes": [
		"xml",
		"dui"
	]
}